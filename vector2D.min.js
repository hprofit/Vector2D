window.Vector2D=function(){"use strict";function t(t,r){if(t=void 0===t||null===t?0:t,r=void 0===r||null===r?0:r,isNaN(t)||isNaN(r))throw new TypeError("Both X and Y values for a Vector2D need to be numbers.");this.x=parseFloat(t),this.y=parseFloat(r)}return t.prototype.compare=function(t){if(isNaN(t.x)||isNaN(t.y)||isNaN(this.x)||isNaN(this.y))throw new TypeError("otherVector must be a Vector2D or have numerical X and Y properties.");return this.x===t.x&&this.y===t.y},t.prototype.length=function(){if(isNaN(this.x)||isNaN(this.y))throw new TypeError("Vector2D X and Y must be Numbers.");return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},t.prototype.magnitude=t.prototype.length,t.prototype.normalize=function(r){if(r=r||1,isNaN(r))throw new TypeError("scalar must be a Number");if(isNaN(this.x)||isNaN(this.y))throw new TypeError("Vector2D X and Y must be Numbers.");var e=this.length();return 0===e?this:new t(this.x/e*r,this.y/e*r)},t.prototype.addNew=function(r){if(isNaN(r.x)||isNaN(r.y))throw new TypeError("otherVector must be a Vector2D or have numerical X and Y properties.");return new t(this.x+r.x,this.y+r.y)},t.prototype.add=function(t){if(isNaN(t.x)||isNaN(t.y))throw new TypeError("otherVector must be a Vector2D or have numerical X and Y properties.");this.x+=t.x,this.y+=t.y},t.prototype.subNew=function(r){if(isNaN(r.x)||isNaN(r.y))throw new TypeError("otherVector must be a Vector2D or have numerical X and Y properties.");return new t(this.x-r.x,this.y-r.y)},t.prototype.sub=function(t){if(isNaN(t.x)||isNaN(t.y))throw new TypeError("otherVector must be a Vector2D or have numerical X and Y properties.");this.x-=t.x,this.y-=t.y},t.prototype.mulNew=function(r){if(isNaN(r))throw new TypeError("scalar must be numerical.");return new t(this.x*r,this.y*r)},t.prototype.mul=function(t){if(isNaN(t))throw new TypeError("scalar must be numerical.");this.x*=t,this.y*=t},t.prototype.divNew=function(r){if(isNaN(r)||0===r)throw new TypeError("divisor must be numerical and non-zero.");return new t(this.x/r,this.y/r)},t.prototype.div=function(t){if(isNaN(t)||0===t)throw new TypeError("divisor must be numerical and non-zero.");this.x/=t,this.y/=t},t.angleToVector2D=function(r){if(isNaN(r))throw new TypeError("angle must be numerical.");return r=r*Math.PI/180,new t(Math.round(100*parseFloat(Math.cos(r)))/100,Math.round(100*parseFloat(Math.sin(r)))/100)},t.prototype.vectorToAngleRadians=function(){if(isNaN(this.x)||isNaN(this.y))throw new TypeError("Vector2D X and Y must be Numbers.");return parseFloat(Math.atan2(this.y,this.x))},t.prototype.vectorToAngleDegrees=function(){return 180*this.vectorToAngleRadians()/Math.PI},t.prototype.distance=function(t){return this.subNew(t).length()},t}();